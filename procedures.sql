--ading new client and printing his/her ID
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE ADD_CLIENT(CNAME VARCHAR, CSURNAME VARCHAR, PHONE_NR NUMBER, ADRESS VARCHAR)
AS
NEW_ID INTEGER;
B INTEGER;
CLIENT_EXISTS EXCEPTION;
BEGIN
    SELECT COUNT(*) INTO B FROM CLIENTS WHERE C_NAME=CNAME AND SURNAME=CSURNAME AND PHONE_NUMBER=PHONE_NR;
    IF B>0 THEN RAISE CLIENT_EXISTS;

    ELSE    
    SELECT NVL(MAX(ID_CLIENT)+1, 1) INTO NEW_ID FROM CLIENTS;
    
    INSERT INTO CLIENTS VALUES(NEW_ID, CNAME, CSURNAME, PHONE_NR, ADRESS);
    
    DBMS_OUTPUT.PUT_LINE('NEW CLIENT ADDED TO DATBASE - ID: '||NEW_ID||' SURNAME: '||CSURNAME);
    COMMIT;
    END IF;
EXCEPTION
    WHEN CLIENT_EXISTS THEN DBMS_OUTPUT.PUT_LINE('CLIENT ID: '||NEW_ID||' SURNAME: '||CSURNAME||' ALREADY EXISTS IN DATABASE');
END;
/


--raising salary for agent with given ID by given amount of money
CREATE OR REPLACE PROCEDURE RAISE_SAL(AGENTID NUMBER, AMOUNT NUMBER)
AS
CURSOR CURSOR1 IS SELECT * FROM AGENTS WHERE ID_AGENT=AGENTID;
CR CURSOR1%ROWTYPE;
NO_AGENT EXCEPTION;
B NUMBER;
BEGIN
	SELECT COUNT(*) INTO B FROM AGENTS WHERE ID_AGENT=AGENTID;
	IF B=0 THEN RAISE NO_AGENT;
	ELSE
    OPEN CURSOR1;
    LOOP
    FETCH CURSOR1 INTO CR;
    EXIT WHEN CURSOR1%NOTFOUND;
    UPDATE AGENTS SET SALARY=SALARY+AMOUNT
    WHERE ID_AGENT=CR.ID_AGENT;
    END LOOP;
    CLOSE CURSOR1;
	END IF;
EXCEPTION
		WHEN NO_AGENT THEN DBMS_OUTPUT.PUT_LINE('THERE IS NO AGENT WITH GIVEN ID IN THE DATABASE');
END;



--printing average salary of cars in given category 
CREATE OR REPLACE PROCEDURE AVG_PRICE(CAR_CATEGORY VARCHAR2)
AS
AVGPRICE NUMBER;
CAT_DOESNT_EXIST EXCEPTION;
B1 NUMBER;
BEGIN
    SELECT COUNT(*) INTO B1 FROM CAR WHERE C_CATEGORY=CAR_CATEGORY;
    IF B1=0 THEN RAISE CAT_DOESNT_EXIST;
    ELSE
        SELECT AVG(NVL(RENT_PRICE, 0)) INTO AVGPRICE FROM CAR WHERE C_CATEGORY=CAR_CATEGORY;
        DBMS_OUTPUT.PUT_LINE('AVERAGE PRICE FOR CAR FROM CATEGORY: '||CAR_CATEGORY||' IS EQUAL TO: '||AVGPRICE);
    END IF;
EXCEPTION    
    WHEN CAT_DOESNT_EXIST THEN DBMS_OUTPUT.PUT_LINE('THERE IS NO SUCH CATEGORY');
END;
/



--printing information about all repairs for a car with given ID
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE SHOW_REPAIRS(CAR NUMBER)
AS
CURSOR CURS IS (SELECT ID_REPAIR, REAPAIR_DATE, COSTS, ID_MECHANIC FROM REPAIRS WHERE ID_CAR=CAR);
R_ID REPAIRS.ID_REPAIR%TYPE;
R_DATE REPAIRS.REAPAIR_DATE%TYPE;
R_COST REPAIRS.COSTS%TYPE;
R_MECH REPAIRS.ID_MECHANIC%TYPE;
W NUMBER;
NO_CAR EXCEPTION;
BEGIN
    SELECT COUNT(*) INTO W FROM CAR WHERE ID_CAR=CAR;
    IF W=0 THEN RAISE NO_CAR;
    ELSE
    OPEN CURS;
    LOOP
    FETCH CURS INTO R_ID, R_DATE, R_COST, R_MECH;
    EXIT WHEN CURS%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE('ID_REPAIR: '||R_ID||' DATE: '||R_DATE||' COST: '||R_COST||' MECHANIC: '||R_MECH);
    END LOOP;
    CLOSE CURS;
    END IF;

EXCEPTION
    WHEN NO_CAR THEN DBMS_OUTPUT.PUT_LINE('THERE IS NO CAR WITH GIVEN ID IN DATABASE');
END;
/